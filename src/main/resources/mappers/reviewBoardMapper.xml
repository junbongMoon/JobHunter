<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jobhunter.mapper.reviewboardmapper">

	<!-- 게시글 목록 조회 -->
	<!-- <select id="allList" resultType="com.jobhunter.model.reviewboard.ReviewBoardDTO"> 
		SELECT r.boardNo, u.userId AS writer, c.companyName, r.reviewResult, r.likes, 
		r.views, r.postDate FROM reviewBoard r JOIN users u ON r.writer = u.uid JOIN 
		recruitmentnotice rn ON r.gonggoUid = rn.uid JOIN company c ON rn.refCompany 
		= c.uid ORDER BY r.boardNo DESC; </select> -->
	<!-- 작성페이지 조회 -->
	<select id="gonggoAll"
		resultType="com.jobhunter.model.reviewboard.RecruitmentnoticContentDTO">
		SELECT
		rn.uid AS recruitmentnoticeNo,
		res.title AS
		resumeTitle,
		rn.title AS recruitmentTitle,
		c.companyName,
		rn.workType,
		rn.personalHistory,
		rn.payType,
		rn.period
		FROM registration reg
		JOIN
		recruitmentnotice rn ON reg.recruitmentNoticePk = rn.uid
		JOIN resume
		res ON reg.resumePk = res.resumeNo
		JOIN company c ON rn.refCompany =
		c.uid
		WHERE res.userUid = #{res.userUid}
		AND reg.status
		in('PASS','FAILURE','EXPIRED','CHECKED')

	</select>
	<!-- 작성페이지 인서트 -->
	<insert id="insertReview"
		parameterType="com.jobhunter.model.reviewboard.WriteBoardDTO"
		useGeneratedKeys="true" keyProperty="boardNo">
		insert into
		reviewBoard (
		gonggoUid, writer, companyName, reviewType, reviewLevel, reviewResult,
		typeOtherText, content, postDate, likes, views
		) values (
		#{gonggoUid},
		#{writer}, #{companyName}, #{reviewType}, #{reviewLevel},
		#{reviewResult},
		#{typeOtherText}, #{content}, NOW(), 0, 0
		)
	</insert>

	<!-- 상세페이지 조회 -->
	<select id="detailAll" resultMap="ReviewDetailViewDTOMap">
		SELECT
		r.boardNo,
		res.title,
		u.userId,
		rec.workType,
		res.payType,
		rec.personalHistory,
		rec.period,
		rec.detail,
		com.companyName,
		r.reviewResult,
		r.reviewType,
		r.typeOtherText,
		r.reviewLevel,
		r.content,
		r.likes,
		r.views,
		r.writer AS writerUid
		FROM
		reviewBoard r
		JOIN recruitmentnotice rec ON r.gonggoUid = rec.uid
		JOIN
		company com ON rec.refCompany = com.uid
		JOIN registration reg ON
		rec.uid = reg.recruitmentNoticePk
		JOIN resume res ON reg.resumePk =
		res.resumeNo
		JOIN users u ON r.writer = u.uid
		WHERE r.boardNo
		=#{r.boardNo}
		ORDER BY reg.regDate DESC
		LIMIT 1
	</select>

	<resultMap id="ReviewDetailViewDTOMap"
		type="com.jobhunter.model.reviewboard.ReviewDetailViewDTO">
		<result column="boardNo" property="boardNo" />
		<result column="userId" property="userId" />
		<result column="workType" property="workType" />
		<result column="payType" property="payType" />
		<result column="personalHistory" property="personalHistory" />
		<result column="period" property="period" />
		<result column="detail" property="detail" />
		<result column="companyName" property="companyName" />
		<result column="reviewResult" property="reviewResult" />
		<result column="reviewType" property="reviewType" />
		<result column="typeOtherText" property="typeOtherText" />
		<result column="reviewLevel" property="reviewLevel" />
		<result column="content" property="content" />
		<result column="likes" property="likes" />
		<result column="views" property="views" />
		<result column="writerUid" property="writerUid" />
	</resultMap>


	<!-- <select id="selectLastLikeTime" resultType="java.time.LocalDateTime"> 
		SELECT createdAt FROM LikesLog WHERE userId = #{userId} AND boardNo = #{boardNo} 
		AND LikeType = #{likeType} ORDER BY createdAt DESC LIMIT 1 </select> -->
	<!-- 2. 좋아요 등록 -->
	<insert id="insertLike">
		INSERT INTO LikesLog (userId, boardNo,LikeType)
		VALUES
		(#{userId}, #{boardNo}, #{likeType})
	</insert>

	<!-- 3. 좋아요 수 증가 -->
	<update id="updateBoardLikes">
		UPDATE reviewBoard
		SET likes = likes + 1
		WHERE boardNo
		= #{boardNo}
	</update>

	<!-- 좋아요 취소 (삭제) -->
	<delete id="deleteLike">
		DELETE FROM LikesLog
		WHERE userId = #{userId}
		AND
		boardNo = #{boardNo}
	</delete>

	<!-- 좋아요 수 감소 -->
	<update id="decreaseBoardLikes">
		UPDATE reviewBoard
		SET likes = likes - 1
		WHERE boardNo
		= #{boardNo}
	</update>

	<!-- 상세페이지용 좋아요 조회 -->
	<select id="seletHasUserLiked"
		parameterType="com.jobhunter.model.reviewboard.Likes" resultType="int">
		SELECT COUNT(*)
		FROM LikesLog
		WHERE userId = #{userId}
		AND boardNo =
		#{boardNo}
		AND LikeType = #{likeType}
	</select>

	<select id="selectModifyReviewBoard" parameterType="int"
		resultType="com.jobhunter.model.reviewboard.WriteBoardDTO">
		SELECT boardNo, gonggoUid, writer, companyName,
		reviewResult, reviewType,
		reviewLevel, content, typeOtherText 
		FROM reviewBoard
		WHERE
		boardNo = #{boardNo}
	</select>


	<update id="updateReviewBoard">
		UPDATE reviewBoard
		SET
		gonggoUid = #{gonggoUid},
		reviewLevel = #{reviewLevel},
		reviewType= #{reviewType},
		reviewResult
		=#{reviewResult},
		typeOtherText =
		#{typeOtherText},
		content=#{content},
		postDate= NOW()
		WHERE boardNo =
		#{boardNo}
	</update>

	<delete id="deleteById" parameterType="int">
		DELETE FROM reviewBoard
		WHERE boardNo = #{boardNo}
	</delete>


	<!-- 1. 24시간 내 조회했는지 확인 -->
	<select id="checkViewedWithHours" resultType="int">
		SELECT COUNT(*)
		FROM ViewsLog
		WHERE userId = #{userId}
		AND boardNo = #{boardNo}
		AND
		viewedAt >= NOW() - INTERVAL 24 HOUR
	</select>

	<!-- 2. 조회 기록 저장 -->
	<insert id="insertReviewView">
		INSERT INTO ViewsLog (userId, boardNo, viewedAt,
		ViewType)
		VALUES (#{userId}, #{boardNo}, NOW(), #{viewType})
		ON
		DUPLICATE KEY UPDATE viewedAt = NOW()
	</insert>

	<!-- 3. 게시판 조회수 증가 -->
	<update id="updateCountViews">
		UPDATE reviewBoard
		SET views = views + 1
		WHERE boardNo
		= #{boardNo}
	</update>


	<!-- reviewBoardMapper.xml -->
	<select id="countAllBoards" resultType="int">
		SELECT COUNT(*) FROM
		reviewBoard
	</select>


	<!--검색 기능 쿼리 -->
	<select id="selectPagedBoards"
		resultType="com.jobhunter.model.reviewboard.ReviewBoardDTO">
		SELECT r.boardNo,
		u.userId AS writer,  
		c.companyName,
		r.reviewResult,
		r.likes,
		r.views,
		r.postDate
		FROM reviewBoard r
		JOIN
		users u ON r.writer = u.uid
		JOIN
		recruitmentnotice rn ON r.gonggoUid =
		rn.uid
		JOIN company c ON
		rn.refCompany = c.uid
		WHERE 1 = 1

		<if test="resultFilter != null and resultFilter.trim() != ''">
			AND r.reviewResult = #{resultFilter}
		</if>

		<if test="companyFilter != null and companyFilter.trim() != ''">
			AND c.companyName = #{companyFilter}
		</if>

		<choose>
			<when test="'likes'.equals(sortType)">
				ORDER BY r.likes DESC, r.boardNo DESC
			</when>
			<when test="'views'.equals(sortType)">
				ORDER BY r.views DESC, r.boardNo DESC
			</when>
			<otherwise>
				ORDER BY r.boardNo DESC
			</otherwise>
		</choose>

		LIMIT #{offset}, #{size}
	</select>



	<select id="countReviewBoard" resultType="int">
		SELECT COUNT(*)
		FROM reviewBoard r
		JOIN recruitmentnotice rn ON
		r.gonggoUid = rn.uid
		JOIN company c ON rn.refCompany = c.uid
		WHERE 1 = 1

		<if test="resultFilter != null and resultFilter.trim() != ''">
			AND r.reviewResult = #{resultFilter}
		</if>

		<if test="companyFilter != null and companyFilter.trim() != ''">
			AND c.companyName = #{companyFilter}
		</if>
	</select>

	<!-- 회사 목록 -->
	<select id="getCompanyList" resultType="string">
		SELECT DISTINCT
		c.companyName
		FROM recruitmentnotice rn
		JOIN company c ON rn.refCompany
		= c.uid
		ORDER BY c.companyName
	</select>




	<!--CDLog에 띄우는 매퍼 -->
	<select id="selectUserIdByBoardNo" parameterType="int"
		resultType="int">
		SELECT writer FROM reviewBoard WHERE boardNo = #{boardNo}
	</select>

	<insert id="logInsertCreate">
		insert into CDLog (targetId, targetType, logType)
		values (#{uid}, 'REVIEW', 'CREATE')
	</insert>

	<insert id="logInsertDelete">
		insert into CDLog (targetId, targetType, logType)
		values (#{uid}, 'REVIEW', 'DELETE')
	</insert>


	<select id="findWriterUidByBoardNo" resultType="int">
		SELECT writer
		FROM reviewBoard WHERE boardNo = #{boardNo}
	</select>
	
	<!-- 육근우_내가 작성한 리뷰 댓글수 포함 검색 -->
	<select id="selectReviewBoardWithReplies" resultType="com.jobhunter.model.reviewboard.ReviewBoardWithReplyVO">
	  SELECT 
	    r.boardNo,
	    r.companyName,
	    CONCAT(LEFT(r.content, 20), IF(CHAR_LENGTH(r.content) > 20, '...', '')) AS content,
	    r.postDate,
	    r.likes,
	    r.views,
	    IFNULL(rr.replyCnt, 0) AS replyCnt
	  FROM reviewBoard r
	  LEFT JOIN (
	    SELECT boardNo, COUNT(*) AS replyCnt
	    FROM reviewReply
	    WHERE isDeleted = 'N'
	    GROUP BY boardNo
	  ) rr ON r.boardNo = rr.boardNo
	
	  <where>
	    <!-- 댓글 여부 필터 -->
	    <if test="resultFilter == 'isReply'">
	      rr.replyCnt &gt; 0
	    </if>
	
	    <!-- 작성자 필터 -->
	    AND r.writer = #{writer}
	  </where>
	
	  <!-- 정렬 기준 -->
	  <choose>
	    <when test="sortType == 'likes'">
	      ORDER BY r.likes DESC
	    </when>
	    <when test="sortType == 'views'">
	      ORDER BY r.views DESC
	    </when>
	    <otherwise>
	      ORDER BY r.postDate DESC
	    </otherwise>
	  </choose>
	
	  LIMIT 5 OFFSET #{offset}
	</select>
	
	<select id="countReviewBoardWithReplies" resultType="int">
	  SELECT COUNT(*)
	  FROM reviewBoard r
	  LEFT JOIN (
	    SELECT boardNo, COUNT(*) AS replyCnt
	    FROM reviewReply
	    WHERE isDeleted = 'N'
	    GROUP BY boardNo
	  ) rr ON r.boardNo = rr.boardNo
	
	  <where>
	    <!-- 댓글 여부 필터 -->
	    <if test="resultFilter == 'isReply'">
	      rr.replyCnt &gt; 0
	    </if>
	
	    <!-- 작성자 필터 -->
	    AND r.writer = #{writer}
	  </where>
	</select>

</mapper>