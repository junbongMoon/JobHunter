<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jobhunter.mapper.reviewboardmapper">

	<!-- 게시글 목록 조회 -->

	<select id="allList"
		resultType="com.jobhunter.model.reviewboard.ReviewBoardDTO">
		SELECT
		r.boardNo,
		u.userId AS writer,
		c.companyName,
		r.likes,
		r.views,
		r.postDate
		FROM
		reviewBoard r
		JOIN
		users u ON r.writer = u.uid
		JOIN
		recruitmentnotice rn ON r.gonggoUid = rn.uid
		JOIN
		company c ON
		rn.refCompany = c.uid
		ORDER BY
		r.boardNo DESC;
	</select>
	<!-- 작성페이지 조회 -->
	<select id="gonggoAll"
		resultType="com.jobhunter.model.reviewboard.RecruitmentnoticContentDTO">
		SELECT
		rn.uid AS recruitmentnoticeNo,
		res.title AS
		resumeTitle,
		rn.title AS recruitmentTitle,
		c.companyName,
		rn.workType,
		rn.personalHistory,
		rn.payType,
		rn.period
		FROM registration reg
		JOIN
		recruitmentnotice rn ON reg.recruitmentNoticePk = rn.uid
		JOIN resume
		res ON reg.resumePk = res.resumeNo
		JOIN company c ON rn.refCompany =
		c.uid
		WHERE res.userUid = #{res.userUid}
		AND reg.status in('PASS','FAILURE','EXPIRED','CHECKED')

	</select>
	<!-- 작성페이지 인서트 -->
	<insert id="insertReview"
		parameterType="com.jobhunter.model.reviewboard.WriteBoardDTO"
	useGeneratedKeys="true"
	keyProperty="boardNo">
		insert into reviewBoard
		(gonggoUid,
		writer,
		companyName,
		reviewType,
		reviewLevel,
		reviewResult,
		content,
		postDate,
		likes,
		views
		)
		VALUES (
		#{gonggoUid},
		#{writer},
		#{companyName},
		#{reviewType},
		#{reviewLevel},
		#{reviewResult},
		#{content},
		NOW(),
		0,
		0
		)
	</insert>

	<!-- 상세페이지 조회 -->
	<select id="detailAll" resultMap="ReviewDetailViewDTOMap">
		SELECT
		r.boardNo,
		res.title,
		u.userId,
		rec.workType,
		res.payType,
		rec.personalHistory,
		rec.period,
		rec.detail,
		com.companyName,
		r.reviewResult,
		r.reviewType,
		r.reviewLevel,
		r.content,
		r.likes,
		r.views
		FROM reviewBoard r
		INNER JOIN users u ON
		r.writer =
		u.uid
		INNER JOIN recruitmentnotice rec ON r.gonggoUid =
		rec.uid
		INNER
		JOIN resume res ON rec.uid =res.resumeNo
		INNER JOIN company
		com ON
		rec.refCompany = com.uid
		WHERE r.boardNo = #{boardNo}
	</select>

	<resultMap id="ReviewDetailViewDTOMap"
		type="com.jobhunter.model.reviewboard.ReviewDetailViewDTO">
		<result column="boardNo" property="boardNo" /> <!-- 게시글 번호 -->
		<result column="title" property="title" /> <!-- 공고 제 -->
		<result column="userId" property="userId" /> <!--유저 아이디 -->
		<result column="workType" property="workType" /> <!-- 근무 형태 -->
		<result column="payType" property="payType" /><!-- 급여 형태 -->
		<result column="personalHistory" property="personalHistory" /> <!--경력사항 -->
		<result column="period" property="period" /><!--근무기간 -->
		<result column="detail" property="detail" /><!-- 공고 상세 설명 -->
		<result column="companyName" property="companyName" /> <!--회사명 -->
		<result column="reviewResult" property="reviewResult" /><!-- 면접 
			결과 -->
		<result column="reviewType" property="reviewType" /> <!-- 면접 유형 -->
		<result column="reviewLevel" property="reviewLevel" /><!--면접 난이도 -->
		<result column="content" property="content" /> <!--후기 본문 -->
		<result column="likes" property="likes" /> <!-- 좋아요 -->
		<result column="views" property="views" /><!-- 조회수 -->
	</resultMap>

	<!-- 1. 최근 24시간 내 좋아요 시간 -->
	<select id="selectLastLikeTime"
		resultType="java.time.LocalDateTime">
		SELECT createdAt
		FROM reviewLikes
		WHERE userId = #{userId}
		AND boardNo = #{boardNo}
		ORDER BY createdAt DESC
		LIMIT 1
	</select>

	<!-- 2. 좋아요 등록 -->
	<insert id="insertLike">
		INSERT INTO reviewLikes (userId, boardNo)
		VALUES
		(#{userId}, #{boardNo})
	</insert>

	<!-- 3. 좋아요 수 증가 -->
	<update id="updateBoardLikes">
		UPDATE reviewBoard
		SET likes = likes + 1
		WHERE boardNo
		= #{boardNo}
	</update>

	<!-- 좋아요 취소 (삭제) -->
	<delete id="deleteLike">
		DELETE FROM reviewLikes
		WHERE userId = #{userId}
		AND
		boardNo = #{boardNo}
	</delete>

	<!-- 좋아요 수 감소 -->
	<update id="decreaseBoardLikes">
		UPDATE reviewBoard
		SET likes = likes - 1
		WHERE boardNo
		= #{boardNo}
	</update>

	<select id="selectModifyReviewBoard" parameterType="int"
		resultType="com.jobhunter.model.reviewboard.WriteBoardDTO">
		SELECT boardNo, gonggoUid, writer, companyName, reviewResult, reviewType,
		reviewLevel, content
		FROM reviewBoard
		WHERE boardNo = #{boardNo}
	</select>


	<update id="updateReviewBoard">
		UPDATE reviewBoard
		SET
		gonggoUid = #{gonggoUid},
		reviewType= #{reviewType},
		reviewResult =#{reviewResult},
		content =#{content},
		postDate= NOW()
		WHERE boardNo =
		#{boardNo}
	</update>
	
	<delete id="deleteById" parameterType="int">
    DELETE FROM reviewBoard WHERE boardNo = #{boardNo}
</delete>
</mapper>