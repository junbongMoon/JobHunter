<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jobhunter.mapper.resumemapper">

    <!-- 이력서 저장 -->
    <insert id="insertResumeFinal" parameterType="com.jobhunter.model.resume.ResumeDTO" useGeneratedKeys="true" keyProperty="resumeNo">
        INSERT INTO resume (title, payType, pay, introduce, userUid, profileBase64, saveType, regDate)
        VALUES (#{title}, #{payType}, #{pay}, #{introduce}, #{userUid}, #{profileBase64}, 'FINAL', NOW());
    </insert>

    <!-- 고용 형태 저장 -->
    <insert id="insertJobForm" parameterType="com.jobhunter.model.resume.JobFormDTO">
        INSERT INTO jobform (Form, resumeNo)
        VALUES (#{form}, #{resumeNo});
    </insert>

    <!-- 지역 저장 -->
    <insert id="insertSigungu" parameterType="map">
        INSERT INTO where_resume_sigungu (refResumeNo, refSigunguNo)
        VALUES (#{resumeNo}, #{sigunguNo});
    </insert>

    <!-- 시/도 리스트 -->
    <select id="selectAllRegions" resultType="com.jobhunter.model.resume.RegionDTO">
        SELECT regionNo, code, name FROM region
    </select>

    <!-- 시/군/구 리스트 -->
    <select id="selectSigunguByRegion" parameterType="int" resultType="com.jobhunter.model.resume.SigunguDTO">
        SELECT sigunguNo, code, name, regionNo
        FROM sigungu
        WHERE regionNo = #{regionNo}
    </select>

    <!-- 업직종 대분류 리스트 -->
    <select id="selectAllMajorCategories" resultType="com.jobhunter.model.resume.MajorCategoryDTO">
        SELECT MajorcategoryNo as majorcategoryNo, jobName
        FROM majorcategory
        ORDER BY MajorcategoryNo
    </select>

    <!-- 업직종 소분류 리스트 -->
    <select id="selectSubCategoriesByMajor" parameterType="int" resultType="com.jobhunter.model.resume.SubCategoryDTO">
        SELECT subcategoryNo, jobName, refMajorcategoryNo as majorcategoryNo
        FROM subcategory
        WHERE refMajorcategoryNo = #{majorcategoryNo}
        ORDER BY subcategoryNo
    </select>

    <!-- 업직종 저장 -->
    <insert id="insertSubCategory" parameterType="map">
        INSERT INTO jobtype_resume_sub (refResumeNo, refSubNo)
        VALUES (#{resumeNo}, #{subcategoryNo});
    </insert>
    
    <!-- 성격 및 장점 저장 -->
	<insert id="insertMerit" parameterType="com.jobhunter.model.resume.MeritDTO">
        INSERT INTO merit (meritContent, resumeNo)
        VALUES (#{meritContent}, #{resumeNo});
    </insert>

    <!-- 학력 저장 -->
    <insert id="insertEducation" parameterType="com.jobhunter.model.resume.EducationDTO">
        INSERT INTO education (educationLevel, educationStatus, graduationDate, customInput, resumeNo)
        VALUES (#{educationLevel}, #{educationStatus}, #{graduationDate}, #{customInput}, #{resumeNo});
    </insert>

    <!-- 경력 저장 -->
    <insert id="insertHistory" parameterType="com.jobhunter.model.resume.PersonalHistoryDTO">
        INSERT INTO personalhistory (companyName, position, jobDescription, startDate, endDate, resumeNo)
        VALUES (#{companyName}, #{position}, #{jobDescription}, #{startDate}, #{endDate}, #{resumeNo});
    </insert>

    <!-- 자격증 저장 -->
    <insert id="insertLicense" parameterType="com.jobhunter.model.resume.LicenseDTO">
        INSERT INTO license (licenseName, acquisitionDate, institution, resumeNo)
        VALUES (#{licenseName}, #{acquisitionDate}, #{institution}, #{resumeNo});
    </insert>

    <!-- 파일 저장 -->
    <insert id="insertResumeUpfile" parameterType="com.jobhunter.model.resume.ResumeUpfileDTO">
        INSERT INTO resumeupfiles (originalFileName, newFileName, ext, size, base64Image, resumeNo)
        VALUES (#{originalFileName}, #{newFileName}, #{ext}, #{size}, #{base64Image}, #{resumeNo});
    </insert>

    <!-- 이력서 기본 정보 조회 -->
    <select id="selectResumeList" parameterType="map" resultType="com.jobhunter.model.resume.ResumeVO">
        SELECT 
            resumeNo,
            title,
            userUid,
            saveType,
            regDate
        FROM resume
        WHERE userUid = #{userUid}
        <if test="searchTitle != null and searchTitle != ''">
            AND title LIKE CONCAT('%', #{searchTitle}, '%')
        </if>
        ORDER BY regDate DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 전체 이력서 수 조회 -->
    <select id="selectTotalResumes" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM resume
        WHERE userUid = #{userUid}
        <if test="searchTitle != null and searchTitle != ''">
            AND title LIKE CONCAT('%', #{searchTitle}, '%')
        </if>
    </select>

    <!-- 이력서별 시군구 정보 조회 -->
    <select id="selectResumeSigungu" parameterType="int" resultType="com.jobhunter.model.resume.SigunguVO">
        SELECT 
            sg.sigunguNo,
            sg.name,
            r.name as regionName,
            r.regionNo
        FROM where_resume_sigungu wrs
        JOIN sigungu sg ON wrs.refSigunguNo = sg.sigunguNo
        JOIN region r ON sg.regionNo = r.regionNo
        WHERE wrs.refResumeNo = #{resumeNo}
    </select>

    <!-- 이력서별 업직종 정보 조회 -->
    <select id="selectResumeSubCategory" parameterType="int" resultType="com.jobhunter.model.resume.SubCategoryVO">
        SELECT 
            sc.subcategoryNo,
            sc.jobName,
            sc.refMajorcategoryNo as majorCategoryNo,
            mc.jobName as majorCategoryName
        FROM jobtype_resume_sub jrs
        JOIN subcategory sc ON jrs.refSubNo = sc.subcategoryNo
        JOIN majorcategory mc ON sc.refMajorcategoryNo = mc.majorcategoryNo
        WHERE jrs.refResumeNo = #{resumeNo}
    </select>

    <!-- 이력서 삭제 -->
    <delete id="deleteResume" parameterType="int">
        DELETE FROM resume
        WHERE resumeNo = #{resumeNo}
    </delete>

    <!-- 이력서 파일 조회 -->
    <select id="selectResumeUpfile" parameterType="int" resultType="com.jobhunter.model.resume.ResumeUpfileDTO">
        SELECT *
        FROM resumeupfiles
        WHERE resumeNo = #{resumeNo}
    </select>
    
    <!-- 이력서 상세 정보 조회 -->
    <select id="selectResumeDetail" parameterType="int" resultType="com.jobhunter.model.resume.ResumeDTO">
        SELECT 
            r.resumeNo,
            r.title,
            r.payType,
            r.pay,
            r.introduce,
            r.userUid,
            r.saveType,
            r.profileBase64
        FROM resume r
        WHERE r.resumeNo = #{resumeNo}
    </select>

    <!-- 이력서 고용형태 조회 -->
    <select id="selectResumeJobForms" parameterType="int" resultType="com.jobhunter.model.resume.JobFormDTO">
        SELECT form
        FROM jobform
        WHERE resumeNo = #{resumeNo}
    </select>

    <!-- 이력서 성격 및 장점 조회 -->
    <select id="selectResumeMerits" parameterType="int" resultType="com.jobhunter.model.resume.MeritDTO">
        SELECT meritContent
        FROM merit
        WHERE resumeNo = #{resumeNo}
    </select>

    <!-- 이력서 학력 조회 -->
    <select id="selectResumeEducations" parameterType="int" resultType="com.jobhunter.model.resume.EducationDTO">
        SELECT educationLevel, educationStatus, graduationDate, customInput
        FROM education
        WHERE resumeNo = #{resumeNo}
    </select>

    <!-- 이력서 경력 조회 -->
    <select id="selectResumeHistories" parameterType="int" resultType="com.jobhunter.model.resume.PersonalHistoryDTO">
        SELECT companyName, position, jobDescription, startDate, endDate
        FROM personalhistory
        WHERE resumeNo = #{resumeNo}
    </select>

    <!-- 이력서 자격증 조회 -->
    <select id="selectResumeLicenses" parameterType="int" resultType="com.jobhunter.model.resume.LicenseDTO">
        SELECT licenseName, acquisitionDate, institution
        FROM license
        WHERE resumeNo = #{resumeNo}
    </select>

    <!-- 이력서 기본 정보 수정 -->
    <update id="updateResume" parameterType="com.jobhunter.model.resume.ResumeDTO">
        UPDATE resume 
        SET title = #{title},
            payType = #{payType},
            pay = #{pay},
            introduce = #{introduce},
            regDate = NOW(),
            profileBase64 = #{profileBase64}
        WHERE resumeNo = #{resumeNo}
    </update>

    <!-- 고용형태 삭제 -->
    <delete id="deleteJobForms" parameterType="int">
        DELETE FROM jobform WHERE resumeNo = #{resumeNo}
    </delete>

    <!-- 성격 및 장점 삭제 -->
    <delete id="deleteMerits" parameterType="int">
        DELETE FROM merit WHERE resumeNo = #{resumeNo}
    </delete>

    <!-- 지역 정보 삭제 -->
    <delete id="deleteResumeSigungu" parameterType="int">
        DELETE FROM where_resume_sigungu WHERE refResumeNo = #{resumeNo}
    </delete>

    <!-- 업직종 정보 삭제 -->
    <delete id="deleteResumeSubCategory" parameterType="int">
        DELETE FROM jobtype_resume_sub WHERE refResumeNo = #{resumeNo}
    </delete>

    <!-- 학력 정보 삭제 -->
    <delete id="deleteEducations" parameterType="int">
        DELETE FROM education WHERE resumeNo = #{resumeNo}
    </delete>

    <!-- 경력 정보 삭제 -->
    <delete id="deleteHistories" parameterType="int">
        DELETE FROM personalhistory WHERE resumeNo = #{resumeNo}
    </delete>

    <!-- 자격증 정보 삭제 -->
    <delete id="deleteLicenses" parameterType="int">
        DELETE FROM license WHERE resumeNo = #{resumeNo}
    </delete>

    <!-- 파일 정보 삭제 -->
    <delete id="deleteResumeUpfiles" parameterType="int">
        DELETE FROM resumeupfiles WHERE resumeNo = #{resumeNo}
    </delete>

    <!-- 유저정보 조회 -->
    <select id="selectUserInfo" parameterType="int" resultType="com.jobhunter.model.user.UserVO">
        SELECT *
        FROM users
        WHERE uid = #{userUid}
    </select>
    
    <!-- 이력서 제출 -->
    <insert id="insertRegistration" parameterType="map">
        INSERT INTO registration (status, recruitmentNoticePk, resumePk, regDate)
        VALUES ('WAITING', #{recruitmentNo}, #{resumeNo}, NOW())
    </insert>
    
    <!-- 이력서 중복 제출 확인 -->
    <select id="checkExistingRegistration" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM registration r
        JOIN resume res ON r.resumePk = res.resumeNo
        WHERE r.recruitmentNoticePk = #{recruitmentNo}
        AND res.userUid = #{userUid}
    </select>
    
    <!-- 이력서 상태 확인 -->
    <select id="checkResumeStatus" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM registration
        WHERE resumePk = #{resumeNo}
        AND status = 'CHECKED'
    </select>

    <!-- 이력서 첨삭 내용 저장 -->
	<insert id="insertAdvice" parameterType="com.jobhunter.model.resume.ResumeAdviceDTO" useGeneratedKeys="true" keyProperty="adviceNo">
		INSERT INTO resume_advice (resumeNo, adviceContent, mentorUid)
		VALUES (#{resumeNo}, #{adviceContent}, #{mentorUid})
	</insert>

	<!-- 기존 첨삭 내용 삭제 -->
	<delete id="deleteExistingAdvice" parameterType="map">
		DELETE FROM resume_advice 
		WHERE resumeNo = #{resumeNo} AND mentorUid = #{mentorUid}
	</delete>

	<!-- 이력서 첨삭 파일 정보 저장 -->
	<insert id="insertAdviceFile" parameterType="com.jobhunter.model.resume.ResumeAdviceUpfileDTO">
		INSERT INTO resume_advice_upfiles (adviceNo, originalFileName, newFileName, ext, size, base64Image, status)
		VALUES (#{adviceNo}, #{originalFileName}, #{newFileName}, #{ext}, #{size}, #{base64Image}, #{status})
	</insert> 

    <!-- 첨삭 내용 조회 -->
    <select id="getAdvice" parameterType="int" resultType="com.jobhunter.model.resume.ResumeAdviceDTO">
        SELECT 
            adviceNo,
            resumeNo,
            adviceContent,
            regDate,
            mentorUid
        FROM resume_advice
        WHERE resumeNo = #{resumeNo}
        ORDER BY regDate DESC
        LIMIT 1
    </select>

    <!-- 첨삭 파일 조회 -->
    <select id="getAdviceFiles" parameterType="int" resultType="com.jobhunter.model.resume.ResumeAdviceUpfileDTO">
        SELECT 
            adviceUpfileNo,
            originalFileName,
            newFileName,
            ext,
            size,
            base64Image,
            status,
            adviceNo
        FROM resume_advice_upfiles
        WHERE adviceNo = #{adviceNo}
    </select>

    <!-- 이력서 첨삭 신청 저장 -->
	<insert id="insertRegistrationAdvice" parameterType="map">
		INSERT INTO registration_advice (regDate, status, mentorUid, resumeNo, dueDate)
		VALUES (NOW(), 'WAITING', #{mentorUid}, #{resumeNo}, #{dueDate})
	</insert>
	
	<!-- 이력서 첨삭 신청 중복 확인 -->
	<select id="checkDuplicateAdvice" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM registration_advice 
		WHERE resumeNo = #{resumeNo}
        AND (status = 'WAITING' OR status = 'CHECKING')
	</select>

	<!-- 이력서 첨삭 상태 확인 -->
	<select id="checkResumeAdvice" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM registration_advice
		WHERE resumeNo = #{resumeNo} AND status = 'CHECKING'
	</select>

    <!-- 첨삭 신청 번호 조회 -->
    <select id="getRegistrationAdviceNo" parameterType="map" resultType="int">
        SELECT rgAdviceNo
        FROM registration_advice
        WHERE mentorUid = #{mentorUid}
        AND resumeNo = #{resumeNo}
        ORDER BY regDate DESC
        LIMIT 1
    </select>

    <!-- 첨삭 상태 변경 -->
    <update id="changeAdviceStatus" parameterType="map">
        UPDATE registration_advice
        SET status = #{status}
        WHERE resumeNo = #{resumeNo}
        AND mentorUid = #{userUid}
    </update>
    
    <select id="selectRegistrationAdviceByMentorWithPaging" resultType="com.jobhunter.model.resume.RegistrationAdviceVO">
	  SELECT 
	    ra.rgAdviceNo,
	    ra.regDate,
	    ra.status,
	    ra.mentorUid,
	    ra.resumeNo,
	    r.title AS title,
	    mentee.uid AS menteeUid
	  FROM registration_advice ra
	  JOIN resume r ON ra.resumeNo = r.resumeNo
	  JOIN users mentee ON r.userUid = mentee.uid
	  <choose>
	    <when test="type == 'mentor'">
	      WHERE mentorUid = #{uid}
	    </when>
	    <when test="type == 'mentee'">
	      WHERE mentee.uid = #{uid}
	    </when>
	    <otherwise>
	      1 = 0
	    </otherwise>
	  </choose>
	  <choose>
	    <when test="status == 'LIVE'">
	      AND status IN ('WAITING', 'CHECKING')
	    </when>
	    <when test="status != null and status != ''">
	      AND status = #{status}
	    </when>
	  </choose>
	  ORDER BY regDate DESC
	  LIMIT 5 OFFSET #{offset}
	</select>
	
	<select id="countRegistrationAdviceByMentor" resultType="int">
	  SELECT COUNT(rgAdviceNo)
	  FROM registration_advice ra
	  JOIN resume r ON ra.resumeNo = r.resumeNo
	  JOIN users mentee ON r.userUid = mentee.uid
	  <choose>
	    <when test="type == 'mentor'">
	      WHERE mentorUid = #{uid}
	    </when>
	    <when test="type == 'mentee'">
	      WHERE mentee.uid = #{uid}
	    </when>
	    <otherwise>
	      1 = 0
	    </otherwise>
	  </choose>
	  <choose>
	    <when test="status == 'LIVE'">
	      AND status IN ('WAITING', 'CHECKING')
	    </when>
	    <when test="status != null and status != ''">
	      AND status = #{status}
	    </when>
	  </choose>
	</select>
	
	<select id="selectResumeAdviceByUserUid" resultType="com.jobhunter.model.resume.ResumeAdviceVO">
	  SELECT
	    ra.adviceNo,
	    ra.resumeNo,
	    ra.regDate,
	    ra.mentorUid,
	    r.title AS title,
	    u.userName AS mentorName,
	    mentee.uid AS menteeUid
	  FROM resume_advice ra
	  JOIN resume r ON ra.resumeNo = r.resumeNo
	  JOIN users u ON ra.mentorUid = u.uid
	  JOIN users mentee ON r.userUid = mentee.uid
	  WHERE r.userUid = #{userUid}
	  ORDER BY ra.regDate DESC
	  LIMIT 5 OFFSET #{offset}
	</select>
	
	<select id="countResumeAdviceByUserUid" resultType="int">
	  SELECT COUNT(adviceNo)
	  FROM resume_advice ra
	  JOIN resume r ON ra.resumeNo = r.resumeNo
	  WHERE r.userUid = #{userUid}
	</select>
    
</mapper>
