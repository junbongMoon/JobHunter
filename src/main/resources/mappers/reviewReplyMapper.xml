<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jobhunter.mapper.reviewreplymapper">

	<!-- 댓글 목록 조회 -->
	<select id="selectRepliesByBoardNo" resultMap="ReplyResultMap"
		parameterType="int">
		SELECT
		rr.replyNo,
		rr.boardNo,
		rr.userId,
		u.userId AS writerId,
		rr.content,
		rr.likes,
		rr.postDate,
		rr.updatedAt,
		rr.isDeleted,
		EXISTS (
			SELECT 1 FROM LikesLog l
			WHERE l.userId = #{loginUserId}
			  AND l.boardNo = rr.replyNo
			  AND l.LikeType = 'REPLY'
		) AS isReplyLike
	FROM reviewReply rr
	JOIN users u ON rr.userId = u.uid
	WHERE rr.boardNo = #{boardNo}
	AND rr.isDeleted = 'N'
	ORDER BY rr.postDate DESC
	LIMIT #{size} OFFSET #{offset}
	</select>


	<!-- 댓글 작성 -->
	<insert id="insertReply"
		parameterType="com.jobhunter.model.reviewReply.ReviewReplyDTO"
		useGeneratedKeys="true" keyProperty="replyNo">
		INSERT INTO reviewReply (
		boardNo,
		userId,
		content,
		likes,
		postDate,
		isDeleted
		)
		VALUES (
		#{boardNo},
		#{userId},
		#{content},
		#{likes},
		NOW(),
		'N'
		)
	</insert>


	<update id="updateReplyDate"
		parameterType="com.jobhunter.model.reviewReply.ReviewReplyDTO">
		UPDATE reviewReply
		SET content = #{content}, updatedAt =
		NOW()
		WHERE replyNo = #{replyNo} AND userId = #{userId}
	</update>

	<update id="deleteReplyDate" parameterType="map">
		UPDATE reviewReply
		SET isDeleted = 'Y'
		WHERE replyNo = #{replyNo} AND userId = #{userId}
	</update>


	<!-- 댓글 페이징 조회 -->
	<select id="selectRepliesWithPaging" 
        resultType="com.jobhunter.model.reviewReply.ReviewReplyDTO"
        parameterType="map">
		SELECT
		rr.replyNo,
		rr.boardNo,
		rr.userId,
		u.uid AS uid,
		u.userId AS writerId,
		rr.content,
		rr.likes,
		rr.postDate,
		rr.updatedAt,
		rr.isDeleted,
		EXISTS (
			SELECT 1 FROM LikesLog l
			WHERE l.userId = #{loginUserId}
			  AND l.boardNo = rr.replyNo
			  AND l.LikeType = 'REPLY'
		) AS isReplyLike
	FROM reviewReply rr
	JOIN users u ON rr.userId = u.uid
	WHERE rr.boardNo = #{boardNo}
	AND rr.isDeleted = 'N'
	ORDER BY rr.postDate DESC
	LIMIT #{size} OFFSET #{offset}
	</select>

	<!-- 댓글 총 개수 조회 (페이징용) -->
	<select id="countRepliesByBoardNo" resultType="int">
		SELECT COUNT(*)
		FROM reviewReply
		WHERE boardNo = #{boardNo}
		AND isDeleted = 'N'
	</select>

	<!-- 결과 매핑 -->
	<resultMap id="ReplyResultMap"
		type="com.jobhunter.model.reviewReply.ReviewReplyDTO">
		<id property="replyNo" column="replyNo" />
		<result property="boardNo" column="boardNo" />
		<result property="userId" column="userId" />
		<result property="writerId" column="writerId" />
		<result property="content" column="content" />
		<result property="likes" column="likes" />
		<result property="postDate" column="postDate" />
		<result property="updatedAt" column="updatedAt" />
		<result property="isDeleted" column="isDeleted" />
		<result property="isReplyLike" column="isReplyLike" />
	</resultMap>

	<!-- 1. 좋아요 추가 -->
	<insert id="insertReplyLike">
		INSERT INTO LikesLog (userId, boardNo, LikeType)
		VALUES (#{userId}, #{boardNo}, 'REPLY')
	</insert>

	<!-- 2. 좋아요 삭제 -->
	<delete id="deleteReplyLike">
		DELETE FROM LikesLog
		WHERE userId = #{userId}
		AND boardNo = #{boardNo}
		AND LikeType = 'REPLY'
	</delete>

	<!-- 3. 좋아요 확인 -->
	<select id="hasUserLikedReply" resultType="int">
		SELECT COUNT(*) FROM LikesLog
		WHERE userId = #{userId}
		AND boardNo = #{boardNo}
		AND LikeType = 'REPLY'
	</select>

	<!-- 4. 댓글 좋아요 수 증가 -->
	<update id="incrementReplyLikes">
		UPDATE reviewReply
		SET likes = likes + 1
		WHERE replyNo = #{replyNo}
	</update>

	<!-- 5. 댓글 좋아요 수 감소 -->
	<update id="decrementReplyLikes">
		UPDATE reviewReply
		SET likes = likes - 1
		WHERE replyNo = #{replyNo}
	</update>





</mapper>
