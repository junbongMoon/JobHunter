<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jobhunter.mapper.usermapper">

	<resultMap id="accountMap"
		type="com.jobhunter.model.account.AccountVO">
		<result column="userId" property="accountId" />
		<result column="userName" property="accountName" />
		<result column="accountType" property="accountType" />
		<!-- 나머지는 동일 컬럼이므로 자동 매핑 -->
	</resultMap>

	<update id="setVerificationFalse" parameterType="map">
		UPDATE users
		SET requiresVerification = 'N'
		WHERE
		<choose>
			<when test="type eq 'email'">
				email = #{value}
			</when>
			<when test="type eq 'mobile'">
				mobile = #{value}
			</when>
		</choose>
	</update>

	<select id="isAuthVerifi" resultType="String">
		select requiresVerification
		from users where userId = #{id}
	</select>

	<select id="loginAccount" resultMap="accountMap">
		select *, userId as
		accountId, userName as accountName
		from users
		where userId = #{id} and
		password = sha1(md5(#{password}))
	</select>

	<update id="setLastLoginDate">
		UPDATE users
		SET lastLoginDate = NOW()
		where uid = #{uid}
	</update>

	<update id="setAutoLogin">
		UPDATE users SET autoLogin = #{autoLogin}
		where userId = #{id} and
		password = sha1(md5(#{password}))
	</update>

	<select id="existsAccountId" parameterType="String"
		resultType="boolean">
		SELECT EXISTS (SELECT 1 FROM users WHERE userId = #{id})
	</select>

	<update id="increaseFailCount" parameterType="String">
		UPDATE users SET
		loginCnt = loginCnt + 1 WHERE userId = #{id}
	</update>

	<select id="getFailCount" parameterType="String"
		resultType="int">
		SELECT loginCnt FROM users WHERE userId = #{id}
	</select>

	<update id="setRequiresVerification" parameterType="String">
		UPDATE users
		SET requiresVerification = 'Y' WHERE userId = #{id}
	</update>

	<update id="resetFailCount" parameterType="String">
		UPDATE users SET
		loginCnt = 0 WHERE userId = #{id}
	</update>

	<select id="getAccountByUid" resultMap="accountMap">
		select *, userId as
		accountId, userName as accountName
		from users
		where uid = #{uid}
	</select>
	
	<select id="getAccountByAutoLogin" resultMap="accountMap">
		select *, userId as
		accountId, userName as accountName
		from users
		where autoLogin = #{sessionId}
	</select>

	<!-- 여기까진 로그인용 -->

	<select id="getUserInfo" parameterType="String"
		resultType="com.jobhunter.model.user.UserVO">
		SELECT * FROM users where uid = #{uid};
	</select>

	<select id="checkPassword" parameterType="map"
		resultMap="accountMap">
		SELECT *
		FROM users
		WHERE uid = #{uid}
		AND password
		= SHA1(MD5(#{password}))
	</select>

	<update id="updatePassword" parameterType="map">
		UPDATE users SET
		password = SHA1(MD5(#{password})) WHERE uid = #{uid};
	</update>

	<update id="updateEmail" parameterType="map">
		UPDATE users SET email =
		#{email} WHERE uid = #{uid}
	</update>

	<update id="updateMobile" parameterType="map">
		UPDATE users SET mobile
		= #{mobile} WHERE uid = #{uid}
	</update>

	<update id="updateUserInfo"
		parameterType="com.jobhunter.model.user.UserInfoDTO">
		UPDATE users
		SET
		addr = #{addr},
		detailAddr = #{detailAddr},
		gender = #{gender},
		age = #{age},
		payType = #{payType},
		pay = #{pay},
		introduce = #{introduce},
		militaryService = #{militaryService},
		nationality = #{nationality},
		disability = #{disability}
		WHERE uid = #{uid}
	</update>
	
	<select id="findByKakao" resultType="java.lang.Integer">
		SELECT uid FROM users WHERE socialId = #{kakaoId}
	</select>
	
	<insert id="registKakao" useGeneratedKeys="true" keyProperty="uid">
		INSERT INTO `users` (`userName`, `socialId`, `email`, `accountType`, `isSocial`) 
		VALUES (#{nickname}, #{kakaoId}, #{email}, 'USER', 'Y');
	</insert>
	
	<select id="loginByKakaoId" resultMap="accountMap">
		select *, userId as
		accountId, userName as accountName
		from users
		where socialId = #{kakaoId}
	</select>
	
	<select id="findIsUserById" resultType="boolean" parameterType="string">
		SELECT EXISTS (
            SELECT 1 FROM users WHERE userId = #{userId}
        )
	</select>
	
	<select id="findByEmail" resultMap="accountMap">
		select *, userId as
		accountId, userName as accountName
		from users
		where email = #{email}
	</select>
	
	<select id="findByMobile" resultMap="accountMap">
		select *, userId as
		accountId, userName as accountName
		from users
		where mobile = #{mobile}
	</select>
	
	<insert id="registUser" parameterType="com.jobhunter.model.user.UserRegisterDTO"
        useGeneratedKeys="true" keyProperty="uid">
	INSERT INTO `users` 
		(`userName`, `userId`, `password`, `mobile`, `email`, `accountType`, `requiresVerification`, `isSocial`, `nationality`)
	 VALUES 
	 (#{name}, #{id}, sha1(md5(#{password})), #{mobile}, #{email}, 'USER', 'N', 'N', #{nationality});
	</insert>

</mapper>
